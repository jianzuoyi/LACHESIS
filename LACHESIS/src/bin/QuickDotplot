#!/usr/bin/env perl
use warnings;
use strict;

# QuickDotplot
#
# A useful tool to create a dotplot of two-dimensional data.
# For syntax and data-format information, run QuickDotplot with no arguments.
#
# See also QuickHistogram and QuickBarplot.
#
# QuickDotplot is implemented in Perl.  It writes and executes a script in R.
#
# Josh Burton
# January 2013

# Subroutine declarations.
# The definitions are at the end of the file.
sub print_syntax_and_exit();
sub test_input_file($ );
sub find_dot_size($ );
sub write_R_script($ );

# If no arguments were supplied, print syntax and exit.
my $n_args = scalar @ARGV;
&print_syntax_and_exit() if ( $n_args != 1 );

# Figure out the input and output filename.
my $input_file = $ARGV[0];
&test_input_file($input_file);
my $output_jpg = "$input_file.jpg";
$output_jpg =~ s/.+\///g;
$output_jpg = "out/$output_jpg"; # move the output filename to out/

# Figure out the optimal dot size for visual cleanliness.
my $dot_size = &find_dot_size( $input_file );

# Write an R script.  The exact format of the script is specified in &write_R_script and depends on many variables.
my $script_file = "QuickDotplot.R";
write_R_script($script_file);

# Now that the R script has been written, let's run it in R.
print "QuickDotplot: Writing a JPG to $output_jpg\n";
system( "R -f $script_file --slave" );
#system( "rm $script_file" );

#######################
#                     #
#     SUBROUTINES     #
#                     #
#######################


# Subroutine: print_syntax_and_exit
sub print_syntax_and_exit()
{
    print <<SYNTAX_END;
QuickDotplot: A useful tool to create a dotplot of two-dimensional data.

Syntax:
QuickDotplot <input file>

The input file should consist of one or more lines, each of which contains either two or three fields (the same number of fields per line for the whole file.)
The first two fields are numbers and represent the x- and y- values of points in the dotplot.
The third field, if given, represents a set of categories that will cause the dots to be drawn in a different color for each unique category.
Any commented lines (starting with '#') at the top of the file are ignored.

The dot plot is written to a JPEG at "<input file>.jpg".

SYNTAX_END
    exit;
}


# Subroutine: test_input_file
# If this filename doesn't represent a good input file, die.
# This pre-empts a much messier error message in R later.
sub test_input_file($ )
{
    die "ERROR: QuickDotplot: Can't find input file $_[0]\n" unless -e $_[0];
    die "ERROR: QuickDotplot: Empty input file $_[0]\n"      unless -s $_[0];
}




# Subroutine: find_dot_size
# Input: One filename from command-line args, with dotplot data.
# Output: The value of the variable $size to make dotplots have the appropriate size, based on the overall dataset size.
sub find_dot_size($ )
{
    # Get the number of lines in the file (it gets stored in the variable $.).
    open FILE, '<', $_[0] or die "Can't open input file $_[0]: $!";
    while (<FILE>) {}
    
    # Inspection shows that a dot size inversely related to the dataset size is a good choice.
    my $dot_size = int(100 / $.) + 2.0;
    
    close FILE;
    return $dot_size;
}




# Subroutine: write_R_script
# Writes an R script to the filehandle at $_[0].
# The content of the script depends on the global variables $input_file, $output_jpg, and $dot_size.
sub write_R_script($ )
{
    my $filename = $_[0];
    open R_SCRIPT, '>', $filename;
    
    my $time = localtime();
    
    print R_SCRIPT <<FILE_END
#!/net/gs/vol3/software/modules-sw/R/2.15.1/Linux/RHEL6/x86_64/bin/Rscript
# The above "shebang" allows this file to be self-executing

# QuickDotplot.R
#
# This R script was generated by the Perl command QuickDotplot, at
# $time
# Specifically, the command was:
# < directory=$ENV{'PWD'} >
# QuickDotplot @ARGV


library( ggplot2, quietly=TRUE ) # ggplot

dotplot.file <- '$input_file'
jpeg.file <- '$output_jpg'


# Read the dotplot file.
dotplot <- read.table( dotplot.file, header=FALSE )

# Load the data into a ggplot object.
p <- ggplot( dotplot, aes( x=V1, y=V2 ) )
p <- p + theme_bw()

# Plot the points, and load in the colors, if any were given.
if ( ncol(dotplot) == 2 ) {
    p <- p + geom_point( size = $dot_size, col='black' )
    w <- 14
} else {
    p <- p + geom_point( size = $dot_size, aes( col=dotplot[,3] ) )
    if ( dim( table( dotplot[,3] ) ) <= 10 ) {
        p <- p + scale_colour_brewer(palette="Set1") # color mapping
    }
    w <- 12
}

# Assign text labels.
p <- p + ggtitle( "QuickDotplot of $input_file" )
p <- p + xlab("")
p <- p + ylab("")

# Save the plot to the jpeg file.  Adjust the width to make room for a legend, if there is one.
suppressWarnings( ggsave( filename=jpeg.file, plot=p, width=w, height=12 ) )

FILE_END
    ;
    
    close R_SCRIPT;
    
    # Make the script file executable.  This goes hand in hand with the shebang at the top of the file.
    system( "chmod 755 $filename" );
}



# Addendum:  The color scheme from SKY.
# These RGB values were taken from a close-up of a SKY image at: http://www.ncbi.nlm.nih.gov/sky/ccap_helper.cgi?tsc=2
#p <- p + scale_colour_manual( values=c('#FFE800','#900101','#8F8090','#8DE3F6','#8A6911','#9C4D94','#F0A0B0','#F66824','#FFFFFF','#049618','#0495D1','#EE04EF','#F70914','#9386EE','#7FE7A0','#F8A80C','#0028F8','#C01C68','#48F41B','#B064EF','#F4F49E','#F6ACF7','#025E45','#ABF51C') )
